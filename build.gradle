plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'jacoco'
	id "org.sonarqube" version "5.1.0.4882"
}

group = 'com.challenge.ecommerce.tps'
version = '1.0.0-SNAPSHOT'

java {
	sourceCompatibility = '17'
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

spotless {
	java {
		importOrder()
		removeUnusedImports()
		cleanthat()
		eclipse()
		formatAnnotations()
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	runtimeOnly 'com.h2database:h2'
	implementation 'org.springframework.boot:spring-boot-starter-validation:3.1.3'
	implementation 'org.modelmapper:modelmapper:3.1.1'
	implementation files('src/main/librarys/security-library-1.0.3.jar')

}


tasks.named('test') {
	useJUnitPlatform()
	jacoco {
		enabled = true
		destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
	}
}


jacoco {
	toolVersion = "0.8.12"
	reportsDirectory = layout.buildDirectory.dir("reports/jacoco")

}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('reports/jacoco/html')
	}
	classDirectories.setFrom(
			fileTree(dir: "$buildDir/classes/java/main", includes: ['**/*.class'], excludes: [
					'**/config/**',
					'**/*Exception*.class',
					'**/*Dto*.class',
					'**/api/**',
					'**/domain/**',
					'**/shared/**'
			])
	)
	finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.85
			}
		}

		rule {
			enabled = false
			element = 'CLASS'
			includes = ['org.gradle.*']

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.85
			}
		}
	}
	classDirectories.setFrom(
			fileTree(dir: "$buildDir/classes/java/main", includes: ['**/*.class'], excludes: [
					'**/config/**',
					'**/*Exception*.class',
					'**/*dto*.class',
					'**/api/**',
					'**/domain/**',
					'**/shared/**'

			])
	)
}

sonar {
	properties {
		property "sonar.projectKey", "product-management"
		property "sonar.host.url",  "http://localhost:9000"
		property "sonar.login", "sqp_a80e22cccc25b30a0313ce0205841dccfaba4413"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.junit.reportPaths", "build/test-results/test"
		property "sonar.jacoco.reportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.coverage.minimum", "85"
	}
}
